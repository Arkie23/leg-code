#include <HCSR04.h>
#include <ArduinoBLE.h>
#include "ble_functions.h"
#include "buzzer_functions.h"
//Since code is split over multiple files, we have to include them here
#define TRIGGER_PIN 2
#define ECHO_PIN 3

UltraSonicDistanceSensor distanceSensor(TRIGGER_PIN, ECHO_PIN);

//Name your controller!
const char* deviceName = "nova component 4";

// Pin definitions buzzer/LED
const int BUZZER_PIN = 11;       // Pin makes an audible sound when an object is moved to the distance sensor
const int LED_PIN = LED_BUILTIN; // Status LED pin

// Movement state tracking
int currentMovement = 0;         // Current movement value (0=none, 1=up, 2=down, 3=handshake)

float distance = 0.0f;
float smoothedDistance = 0.0f;
float lastSmoothedDistance = 0.0f;
float totalMotion = 0.0f;
unsigned long lastReadTime = 0;
const unsigned int readInterval = 30;
const float MOTION_THRESHOLD = 0.8;
 

// Rolling average
const int AVERAGE_WINDOW = 5;
float readings[AVERAGE_WINDOW];
int readIndex = 0;
float totalValue = 0;



void setup() 
{
  
  Serial.begin(9600);
  

  
  // Configure LED for connection status indication
  pinMode(LED_PIN, OUTPUT);
  
  // Initialize Bluetooth Low Energy with device name and status LED
  setupBLE(deviceName, LED_PIN);
  
  // Initialize buzzer for feedback
  setupBuzzer(BUZZER_PIN);
}

void loop() 
{
  // Update BLE connection status and handle incoming data
  updateBLE();
  
  //read the inputs te determine the current state
  //results in changing the value of currentMovement
  handleInput();

  //send the movement state to P5  
  sendMovement(currentMovement);

  //make the correct noise
  updateBuzzer(currentMovement);
  
  
}

void handleInput() 
{
//put code here that reads the sensor input
//and assigns currentMovement(0=stop, 1=up, 2=down)
unsigned long currentTime = millis();
  if (currentTime - lastReadTime >= readInterval) {
    float newDistance = distanceSensor.measureDistanceCm();
    
    if (newDistance > 0) {
      distance = newDistance;
      
      // Update rolling average
      totalValue = totalValue - readings[readIndex];
      readings[readIndex] = distance;
      totalValue = totalValue + distance;
      readIndex = (readIndex + 1) % AVERAGE_WINDOW;
      lastSmoothedDistance = smoothedDistance;
      smoothedDistance = totalValue / AVERAGE_WINDOW;
      
      // Calculate motion
      float change = smoothedDistance - lastSmoothedDistance;
      totalMotion += abs(change);
      
      // Print verbose status
      Serial.print("Raw Distance: ");
      Serial.print(distance);
      Serial.print(" cm | ");
      
      Serial.print("Smoothed: ");
      Serial.print(smoothedDistance);
      Serial.print(" cm | ");
      
      Serial.print("Current Motion: ");
      Serial.print(abs(change));
      Serial.print(" cm | ");
      
      Serial.print("State: ");
      if(abs(change) < MOTION_THRESHOLD) {
        Serial.print("STILL");
        currentMovement=0;
      } else if(change > 0) {
        Serial.print("AWAY ");
        currentMovement=1;
      } else {
        Serial.print("TOWARD");
        currentMovement=2;
      }
      Serial.print(" | ");
      
      Serial.print("Total Motion: ");
      Serial.print(totalMotion);
      Serial.println(" cm");
    }
    lastReadTime = currentTime;
  }




}
